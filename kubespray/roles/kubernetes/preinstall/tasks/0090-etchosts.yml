---
- name: Hosts | create hosts list from inventory
  set_fact:
    etc_hosts_inventory_block: |-
      {% for item in (groups['k8s_cluster'] + groups['etcd'] | default([]) + groups['calico_rr'] | default([])) | unique -%}
      {% if 'access_ip' in hostvars[item] or 'ip' in hostvars[item] or hostvars[item]['ansible_default_ipv4'] -%}
      {{ hostvars[item]['access_ip'] | default(hostvars[item]['ip'] | default(hostvars[item]['ansible_default_ipv4']['address'])) }}
      {%- if ('ansible_hostname' in hostvars[item] and item != hostvars[item]['ansible_hostname']) %} {{ hostvars[item]['ansible_hostname'] }}.{{ dns_domain }} {{ hostvars[item]['ansible_hostname'] }} {% else %} {{ item }}.{{ dns_domain }} {{ item }} {% endif %}

      {% endif %}
      {% if ('access_ip6' in hostvars[item] or 'ip6' in hostvars[item] or hostvars[item]['ansible_default_ipv6']) and (enable_ipv6only_stack_networks or enable_dual_stack_networks) -%}
      {{ hostvars[item]['access_ip6'] | default(hostvars[item]['ip6'] | default(hostvars[item]['ansible_default_ipv6']['address'])) }}
      {%- if ('ansible_hostname' in hostvars[item] and item != hostvars[item]['ansible_hostname']) %} {{ hostvars[item]['ansible_hostname'] }}.{{ dns_domain }} {{ hostvars[item]['ansible_hostname'] }} {% else %} {{ item }}.{{ dns_domain }} {{ item }} {% endif %}

      {% endif %}
      {% endfor %}
  delegate_to: localhost
  connection: local
  delegate_facts: true
  run_once: true

- name: Hosts | populate inventory into hosts file
  blockinfile:
    path: /etc/hosts
    block: "{{ hostvars.localhost.etc_hosts_inventory_block }}"
    state: "{{ 'present' if populate_inventory_to_hosts_file else 'absent' }}"
    create: true
    backup: true
    unsafe_writes: true
    marker: "# Ansible inventory hosts {mark}"
    mode: "0644"

- name: Hosts | populate kubernetes loadbalancer address into hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ apiserver_loadbalancer_domain_name }}$"
    line: "{{ loadbalancer_apiserver.address }} {{ apiserver_loadbalancer_domain_name }}"
    state: present
    backup: true
    unsafe_writes: true
  when:
    - populate_loadbalancer_apiserver_to_hosts_file
    - loadbalancer_apiserver is defined
    - loadbalancer_apiserver.address is defined

- name: Hosts | Update localhost entries in hosts file
  when: populate_localhost_entries_to_hosts_file
  block:
    - name: Hosts | Retrieve hosts file content
      slurp:
        src: /etc/hosts
      register: etc_hosts_content

    - name: Hosts | Extract existing entries for localhost from hosts file
      set_fact:
        etc_hosts_localhosts_dict: >-
          {%- set splitted = (item | regex_replace('[ \t]+', ' ') | regex_replace('#.*$') | trim).split(' ') -%}
          {{ etc_hosts_localhosts_dict | default({}) | combine({splitted[0]: splitted[1::]}) }}
      with_items: "{{ (etc_hosts_content['content'] | b64decode).splitlines() }}"
      when:
        - etc_hosts_content.content is defined
        - (item is match('^::1 .*') or item is match('^127.0.0.1 .*'))

    - name: Hosts | Update target hosts file entries dict with required entries
      set_fact:
        etc_hosts_localhosts_dict_target: >-
          {%- set target_entries = (etc_hosts_localhosts_dict | default({})).get(item.key, []) | difference(item.value.get('unexpected', [])) -%}
          {{ etc_hosts_localhosts_dict_target | default({}) | combine({item.key: (target_entries + item.value.expected) | unique}) }}
      loop: "{{ etc_hosts_localhost_entries | dict2items }}"

    - name: Hosts | Update (if necessary) hosts file
      lineinfile:
        dest: /etc/hosts
        line: "{{ item.key }} {{ item.value | join(' ') }}"
        regexp: "^{{ item.key }}.*$"
        state: present
        backup: true
        unsafe_writes: true
      loop: "{{ etc_hosts_localhosts_dict_target | default({}) | dict2items }}"

# gather facts to update ansible_fqdn
- name: Update facts
  setup:
    gather_subset: min
  when:
    - not dns_late
